<% layout("/layouts/boilerplate") %>
<style>
    body { margin: 0; font-family: Arial, sans-serif; background-color: #f4f4f4; }
    #map { height: 500px; width: 1000px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); margin: 10px 10px; display: block; }
    .mapBody { display: flex; justify-content: center; align-items: center; min-height: 60vh; }
    input[type="text"], button { padding: 10px; margin: 10px; border-radius: 5px; border: 1px solid #ddd; font-size: 16px; width: calc(100% - 40px); max-width: 300px; box-sizing: border-box; }
    input[type="text"] { display: inline-block; background-color: #fff; }
    button { background-color: #007bff; color: white; cursor: pointer; transition: background-color 0.3s ease; border: none; }
    button:hover { background-color: #0056b3; }
    .controls { text-align: center; margin-bottom: 20px; }
    #warning { font-size: 14px; color: #ff0000; margin: 10px auto; text-align: center; }
    @media screen and (max-width: 1024px) {
        #map { width: 90%; }
        input[type="text"], button { width: calc(100% - 20px); max-width: none; }
    }
</style>
<script src="https://maps.googleapis.com/maps/api/js?key=<%=process.env.YOUR_API_KEY%>&libraries=visualization,drawing,places" async defer></script>
</head>
<body>
    <div class="mapBody">
        <div id="map"></div>
    </div>
    <div class="controls">
        <input type="text" id="source-input" placeholder="Fetching live location..." />
        <input type="text" id="destination-input" placeholder="Enter destination" />
        <button id="get-route">Get Route</button>
    </div>
    <div id="warning"></div>

    <script>
        var complaints = <%- complaints %>;
        var map, heatmap, bounds, directionsService, directionsRenderer;
        var heatmapData = [];
        var liveLocationCoords = null;

        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 19.0760, lng: 72.8777 },
                zoom: 13
            });

            bounds = new google.maps.LatLngBounds();
            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer({
                map: map,
                suppressMarkers: true
            });

            populateHeatmapData().then(() => {
                createHeatmap(heatmapData);
                map.fitBounds(bounds);
            });

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(position => {
                    liveLocationCoords = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    map.setCenter(liveLocationCoords);

                    new google.maps.Marker({
                        position: liveLocationCoords,
                        map: map,
                        title: "Your Live Location"
                    });

                    reverseGeocodeLocation(liveLocationCoords)
                        .then(address => {
                            document.getElementById('source-input').value = address;
                        });

                    document.getElementById('get-route').addEventListener('click', () => {
                        const source = document.getElementById('source-input').value;
                        const destination = document.getElementById('destination-input').value;
                        calculateRoute(source, destination);
                    });
                }, () => {
                    handleLocationError(true, map.getCenter());
                });
            } else {
                handleLocationError(false, map.getCenter());
            }
        }

        function populateHeatmapData() {
            return Promise.all(complaints.map(complaint => 
                geocodeLocation(complaint.location).then(coords => {
                    if (coords) {
                        var latLng = new google.maps.LatLng(coords.lat, coords.lng);
                        var marker = new google.maps.Marker({
                            position: latLng,
                            map: map,
                            title: complaint.complain
                        });

                        bounds.extend(latLng);

                        var infoWindow = new google.maps.InfoWindow({
                            content: `Complaint: ${complaint.complain}<br>Location: ${complaint.location}`
                        });

                        marker.addListener('mouseover', event => {
                            infoWindow.setPosition(event.latLng);
                            infoWindow.open(map, marker);
                        });

                        marker.addListener('mouseout', () => infoWindow.close());

                        heatmapData.push({
                            location: latLng,
                            weight: getWeightFromSeverity(complaint.severity)
                        });
                    }
                })
            ));
        }

        function createHeatmap(data) {
            heatmap = new google.maps.visualization.HeatmapLayer({
                data: data,
                map: map
            });

            heatmap.set('radius', 50);
            heatmap.set('opacity', 0.7);
            heatmap.set('dissipating', true);
            heatmap.set('maxIntensity', 10);
            heatmap.set('gradient', [
                'rgba(0, 255, 0, 0)',
                'rgba(0, 255, 0, 1)',
                'rgba(255, 255, 0, 1)',
                'rgba(255, 165, 0, 1)',
                'rgba(255, 0, 0, 1)'
            ]);
        }

        function calculateRoute(start, end) {
            directionsService.route(
                {
                    origin: start,
                    destination: end,
                    travelMode: google.maps.TravelMode.DRIVING
                },
                (response, status) => {
                    if (status === 'OK') {
                        directionsRenderer.setDirections(response);
                        const severity = checkRouteAgainstHeatmap(response.routes[0].legs[0].steps);

                        const routeDetails = {
                            start: start,
                            end: end,
                            steps: response.routes[0].legs[0].steps.map(step => ({
                                start_location: step.start_location.toString(),
                                end_location: step.end_location.toString(),
                                distance: step.distance.text,
                                duration: step.duration.text,
                            })),
                            overallSeverity: severity
                        };

                        fetch('/api/rate-route', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(routeDetails)
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.rating) {
                                document.getElementById('warning').innerHTML += `<br>Route Safety Rating: ${data.rating} `;
                            }
                        })
                        .catch(error => {
                            console.error('Error sending route details to backend:', error);
                        });
                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
                }
            );
        }

        function checkRouteAgainstHeatmap(steps) {
            let overallSeverity = 'Low';
            const severityLevels = { 'Critical': 3, 'Mild': 2, 'Low': 1 };
            const proximityThreshold = 0.5;
            let warningMessage = '';
            let warningDisplayed = false;

            steps.forEach(step => {
                step.path.forEach(latLng => {
                    heatmapData.forEach(heatmapPoint => {
                        const distance = calculateDistance(latLng, heatmapPoint.location);
                        if (distance <= proximityThreshold) {
                            const currentSeverity = getSeverityFromWeight(heatmapPoint.weight);
                            if (heatmapPoint.weight > 1 && !warningDisplayed) {
                                reverseGeocodeLocation(latLng).then(address => {
                                    warningMessage += `Warning: This route passes through a high-risk area near ${address} with complaints. Consider avoiding this area!<br>`;
                                    document.getElementById('warning').innerHTML = warningMessage || 'Route is clear.';
                                    warningDisplayed = true;
                                });
                            }
                            if (severityLevels[currentSeverity] > severityLevels[overallSeverity]) {
                                overallSeverity = currentSeverity;
                            }
                        }
                    });
                });
            });

            return overallSeverity;
        }

        function getSeverityFromWeight(weight) {
            return weight === 3 ? 'Critical' : weight === 2 ? 'Mild' : 'Low';
        }

        function calculateDistance(latLng1, latLng2) {
            const R = 6371;
            const dLat = degreesToRadians(latLng2.lat() - latLng1.lat());
            const dLng = degreesToRadians(latLng2.lng() - latLng1.lng());
            const a =
                Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(degreesToRadians(latLng1.lat())) * Math.cos(degreesToRadians(latLng2.lat())) *
                Math.sin(dLng / 2) * Math.sin(dLng / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c;
        }

        function degreesToRadians(degrees) {
            return degrees * (Math.PI / 180);
        }

        function geocodeLocation(location) {
            return new Promise((resolve, reject) => {
                new google.maps.Geocoder().geocode({ address: location }, (results, status) => {
                    if (status === 'OK' && results[0]) {
                        resolve({
                            lat: results[0].geometry.location.lat(),
                            lng: results[0].geometry.location.lng()
                        });
                    } else {
                        console.error(`Geocoding error for location "${location}": ${status}`);
                        resolve(null);
                    }
                });
            });
        }

        function reverseGeocodeLocation(latLng) {
            return new Promise((resolve, reject) => {
                new google.maps.Geocoder().geocode({ location: latLng }, (results, status) => {
                    if (status === 'OK' && results[0]) {
                        resolve(results[0].formatted_address);
                    } else {
                        console.error('Geocoding failed: ' + status);
                        resolve('Unknown location');
                    }
                });
            });
        }

        function getWeightFromSeverity(severity) {
            return severity === 'Critical' ? 3 : severity === 'Mild' ? 2 : 1;
        }

        function handleLocationError(browserHasGeolocation, pos) {
            alert(browserHasGeolocation ?
                'Error: The Geolocation service failed.' :
                'Error: Your browser doesn\'t support geolocation.');
            map.setCenter(pos);
        }

        window.onload = initMap;
    </script>
</body>